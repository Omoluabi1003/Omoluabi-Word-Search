import { useState, useEffect } from "react";

const words = [
  "banana", "mango", "lagos", "naira", "zebra",
  "python", "react", "coded", "music", "dance",
  "trade", "money", "books", "hope", "giant"
];

const gridSize = 12;

function generateGrid(words) {
  const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(""));

  for (const word of words) {
    let placed = false;
    let attempts = 0;
    while (!placed && attempts < 100) {
      const dir = Math.random() > 0.5 ? "H" : "V";
      const row = Math.floor(Math.random() * gridSize);
      const col = Math.floor(Math.random() * gridSize);

      if (dir === "H" && col + word.length <= gridSize) {
        if (word.split("").every((ch, i) => grid[row][col + i] === "" || grid[row][col + i] === ch)) {
          word.split("").forEach((ch, i) => grid[row][col + i] = ch);
          placed = true;
        }
      } else if (dir === "V" && row + word.length <= gridSize) {
        if (word.split("").every((ch, i) => grid[row + i][col] === "" || grid[row + i][col] === ch)) {
          word.split("").forEach((ch, i) => grid[row + i][col] = ch);
          placed = true;
        }
      }
      attempts++;
    }
  }

  for (let r = 0; r < gridSize; r++) {
    for (let c = 0; c < gridSize; c++) {
      if (grid[r][c] === "") {
        grid[r][c] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
      }
    }
  }
  return grid;
}

export default function WordSearchGame() {
  const [grid, setGrid] = useState([]);
  const [found, setFound] = useState([]);

  useEffect(() => {
    setGrid(generateGrid(words));
  }, []);

  return (
    <div className="flex flex-col md:flex-row p-4 gap-4">
      <div className="grid grid-cols-12 gap-1">
        {grid.map((row, rIdx) => (
          row.map((letter, cIdx) => (
            <div key={`${rIdx}-${cIdx}`} className="w-6 h-6 md:w-8 md:h-8 text-xs md:text-sm bg-white text-center border border-gray-300 flex items-center justify-center font-bold cursor-pointer">
              {letter}
            </div>
          ))
        ))}
      </div>

      <div className="text-xs md:text-sm grid grid-cols-2 gap-1 max-w-[200px]">
        {words.map((word, i) => (
          <div key={i} className={found.includes(word) ? "line-through text-green-600" : ""}>{word}</div>
        ))}
      </div>
    </div>
  );
}
